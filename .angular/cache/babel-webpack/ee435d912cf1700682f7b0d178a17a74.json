{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { of, EMPTY } from 'rxjs';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { observeOn, switchMap, map, shareReplay } from 'rxjs/operators';\nimport * as i2 from '@angular/fire';\nimport { VERSION } from '@angular/fire';\nimport * as i1 from '@angular/fire/compat';\nimport { ɵcacheInstance, ɵlazySDKProxy, ɵapplyMixins } from '@angular/fire/compat';\nimport { isSupported } from 'firebase/analytics';\nimport * as i2$2 from '@angular/router';\nimport * as i3 from '@angular/platform-browser';\nimport * as i2$1 from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\nimport { ɵscreenViewEvent } from '@angular/fire/analytics'; // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/analytics, so Proxy can work with proxy-polyfill in Internet Explorer\n\nconst proxyPolyfillCompat = {\n  app: null,\n  logEvent: null,\n  setCurrentScreen: null,\n  setUserId: null,\n  setUserProperties: null,\n  setAnalyticsCollectionEnabled: null\n};\nconst COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');\nconst APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');\nconst APP_NAME = new InjectionToken('angularfire2.analytics.appName');\nconst DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');\nconst CONFIG = new InjectionToken('angularfire2.analytics.config');\nconst APP_NAME_KEY = 'app_name';\nconst APP_VERSION_KEY = 'app_version';\nconst DEBUG_MODE_KEY = 'debug_mode';\nconst GTAG_CONFIG_COMMAND = 'config';\nconst GTAG_FUNCTION_NAME = 'gtag'; // TODO rename these\n\nconst DATA_LAYER_NAME = 'dataLayer';\nconst SEND_TO_KEY = 'send_to';\n\nclass AngularFireAnalytics {\n  constructor(app, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, // tslint:disable-next-line:ban-types\n  platformId, zone, schedulers) {\n    this.analyticsInitialized = new Promise(() => {});\n\n    if (isPlatformBrowser(platformId)) {\n      window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || []; // It turns out we can't rely on the measurementId in the Firebase config JSON\n      // this identifier is not stable. firebase/analytics does a call to get a fresh value\n      // falling back on the one in the config. Rather than do that ourselves we should listen\n      // on our gtag function for a analytics config command\n      // e.g, ['config', measurementId, { origin: 'firebase', firebase_id }]\n\n      const parseMeasurementId = (...args) => {\n        if (args[0] === 'config' && args[2].origin === 'firebase') {\n          this.measurementId = args[1];\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      const patchGtag = fn => {\n        window[GTAG_FUNCTION_NAME] = (...args) => {\n          if (fn) {\n            fn(...args);\n          } // Inject app_name and app_version into events\n          // TODO(jamesdaniels): I'm doing this as documented but it's still not\n          //   showing up in the console. Investigate. Guessing it's just part of the\n          //   whole GA4 transition mess.\n\n\n          if (args[0] === 'event' && args[2][SEND_TO_KEY] === this.measurementId) {\n            if (providedAppName) {\n              args[2][APP_NAME_KEY] = providedAppName;\n            }\n\n            if (providedAppVersion) {\n              args[2][APP_VERSION_KEY] = providedAppVersion;\n            }\n          }\n\n          if (debugModeEnabled && typeof console !== 'undefined') {\n            // tslint:disable-next-line:no-console\n            console.info(...args);\n          }\n          /**\n           * According to the gtag documentation, this function that defines a custom data layer cannot be\n           * an arrow function because 'arguments' is not an array. It is actually an object that behaves\n           * like an array and contains more information then just indexes. Transforming this into arrow function\n           * caused issue #2505 where analytics no longer sent any data.\n           */\n          // tslint:disable-next-line: only-arrow-functions\n\n\n          (function (..._args) {\n            window[DATA_LAYER_NAME].push(arguments);\n          })(...args);\n        };\n      }; // Unclear if we still need to but I was running into config/events I passed\n      // to gtag before ['js' timestamp] weren't getting parsed, so let's make a promise\n      // that resolves when firebase/analytics has configured gtag.js that we wait on\n      // before sending anything\n\n\n      const firebaseAnalyticsAlreadyInitialized = window[DATA_LAYER_NAME].some(parseMeasurementId);\n\n      if (firebaseAnalyticsAlreadyInitialized) {\n        this.analyticsInitialized = Promise.resolve();\n        patchGtag();\n      } else {\n        this.analyticsInitialized = new Promise(resolve => {\n          patchGtag((...args) => {\n            if (parseMeasurementId(...args)) {\n              resolve();\n            }\n          });\n        });\n      }\n\n      if (providedConfig) {\n        this.updateConfig(providedConfig);\n      }\n\n      if (debugModeEnabled) {\n        this.updateConfig({\n          [DEBUG_MODE_KEY]: 1\n        });\n      }\n    } else {\n      this.analyticsInitialized = Promise.resolve();\n    }\n\n    const analytics = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(isSupported), switchMap(supported => supported ? zone.runOutsideAngular(() => import('firebase/compat/analytics')) : EMPTY), map(() => {\n      return ɵcacheInstance(`analytics`, 'AngularFireAnalytics', app.name, () => {\n        const analytics = app.analytics();\n\n        if (analyticsCollectionEnabled === false) {\n          analytics.setAnalyticsCollectionEnabled(false);\n        }\n\n        return analytics;\n      }, [app, analyticsCollectionEnabled, providedConfig, debugModeEnabled]);\n    }), shareReplay({\n      bufferSize: 1,\n      refCount: false\n    }));\n    return ɵlazySDKProxy(this, analytics, zone);\n  }\n\n  updateConfig(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.analyticsInitialized;\n      window[GTAG_FUNCTION_NAME](GTAG_CONFIG_COMMAND, this.measurementId, Object.assign(Object.assign({}, config), {\n        update: true\n      }));\n    });\n  }\n\n}\n\nAngularFireAnalytics.ɵfac = function AngularFireAnalytics_Factory(t) {\n  return new (t || AngularFireAnalytics)(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(COLLECTION_ENABLED, 8), i0.ɵɵinject(APP_VERSION, 8), i0.ɵɵinject(APP_NAME, 8), i0.ɵɵinject(DEBUG_MODE, 8), i0.ɵɵinject(CONFIG, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ɵAngularFireSchedulers));\n};\n\nAngularFireAnalytics.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AngularFireAnalytics,\n  factory: AngularFireAnalytics.ɵfac,\n  providedIn: 'any'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAnalytics, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: i1.FirebaseApp\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [COLLECTION_ENABLED]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APP_VERSION]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DEBUG_MODE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.ɵAngularFireSchedulers\n    }];\n  }, null);\n})();\n\nɵapplyMixins(AngularFireAnalytics, [proxyPolyfillCompat]);\n\nclass UserTrackingService {\n  // TODO a user properties injector\n  constructor(analytics, // tslint:disable-next-line:ban-types\n  platformId, auth, zone) {\n    this.disposables = [];\n    firebase.registerVersion('angularfire', VERSION.full, 'compat-user-tracking');\n\n    if (!isPlatformServer(platformId)) {\n      let resolveInitialized;\n      this.initialized = zone.runOutsideAngular(() => new Promise(resolve => resolveInitialized = resolve));\n      this.disposables = [auth.authState.subscribe(user => {\n        analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);\n        resolveInitialized();\n      }), auth.credential.subscribe(credential => {\n        if (credential) {\n          const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;\n\n          if (credential.additionalUserInfo.isNewUser) {\n            analytics.logEvent('sign_up', {\n              method\n            });\n          }\n\n          analytics.logEvent('login', {\n            method\n          });\n        }\n      })];\n    } else {\n      this.initialized = Promise.resolve();\n    }\n  }\n\n  ngOnDestroy() {\n    this.disposables.forEach(it => it.unsubscribe());\n  }\n\n}\n\nUserTrackingService.ɵfac = function UserTrackingService_Factory(t) {\n  return new (t || UserTrackingService)(i0.ɵɵinject(AngularFireAnalytics), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i2$1.AngularFireAuth), i0.ɵɵinject(i0.NgZone));\n};\n\nUserTrackingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserTrackingService,\n  factory: UserTrackingService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserTrackingService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AngularFireAnalytics\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i2$1.AngularFireAuth\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nconst SCREEN_VIEW_EVENT = 'screen_view';\n\nclass ScreenTrackingService {\n  constructor(analytics, router, title, componentFactoryResolver, zone, userTrackingService) {\n    firebase.registerVersion('angularfire', VERSION.full, 'compat-screen-tracking');\n\n    if (!router || !analytics) {\n      return this;\n    }\n\n    zone.runOutsideAngular(() => {\n      this.disposable = ɵscreenViewEvent(router, title, componentFactoryResolver).pipe(switchMap(params => __awaiter(this, void 0, void 0, function* () {\n        if (userTrackingService) {\n          yield userTrackingService.initialized;\n        }\n\n        return yield analytics.logEvent(SCREEN_VIEW_EVENT, params);\n      }))).subscribe();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.disposable) {\n      this.disposable.unsubscribe();\n    }\n  }\n\n}\n\nScreenTrackingService.ɵfac = function ScreenTrackingService_Factory(t) {\n  return new (t || ScreenTrackingService)(i0.ɵɵinject(AngularFireAnalytics), i0.ɵɵinject(i2$2.Router, 8), i0.ɵɵinject(i3.Title, 8), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(UserTrackingService, 8));\n};\n\nScreenTrackingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScreenTrackingService,\n  factory: ScreenTrackingService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScreenTrackingService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: AngularFireAnalytics\n    }, {\n      type: i2$2.Router,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.Title,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.NgZone\n    }, {\n      type: UserTrackingService,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nclass AngularFireAnalyticsModule {\n  constructor(analytics, screenTracking, userTracking) {\n    firebase.registerVersion('angularfire', VERSION.full, 'analytics-compat'); // calling anything on analytics will eagerly load the SDK\n    // tslint:disable-next-line:no-unused-expression\n\n    analytics.app.then(() => {});\n  }\n\n}\n\nAngularFireAnalyticsModule.ɵfac = function AngularFireAnalyticsModule_Factory(t) {\n  return new (t || AngularFireAnalyticsModule)(i0.ɵɵinject(AngularFireAnalytics), i0.ɵɵinject(ScreenTrackingService, 8), i0.ɵɵinject(UserTrackingService, 8));\n};\n\nAngularFireAnalyticsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFireAnalyticsModule\n});\nAngularFireAnalyticsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AngularFireAnalytics]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAnalyticsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAnalytics]\n    }]\n  }], function () {\n    return [{\n      type: AngularFireAnalytics\n    }, {\n      type: ScreenTrackingService,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: UserTrackingService,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { APP_NAME, APP_VERSION, AngularFireAnalytics, AngularFireAnalyticsModule, COLLECTION_ENABLED, CONFIG, DEBUG_MODE, ScreenTrackingService, UserTrackingService };","map":{"version":3,"sources":["C:/Users/George/Documents/catgirl-stats2/node_modules/@angular/fire/fesm2015/angular-fire-compat-analytics.js"],"names":["__awaiter","i0","InjectionToken","PLATFORM_ID","Injectable","Optional","Inject","NgModule","of","EMPTY","isPlatformBrowser","isPlatformServer","observeOn","switchMap","map","shareReplay","i2","VERSION","i1","ɵcacheInstance","ɵlazySDKProxy","ɵapplyMixins","isSupported","i2$2","i3","i2$1","firebase","ɵscreenViewEvent","proxyPolyfillCompat","app","logEvent","setCurrentScreen","setUserId","setUserProperties","setAnalyticsCollectionEnabled","COLLECTION_ENABLED","APP_VERSION","APP_NAME","DEBUG_MODE","CONFIG","APP_NAME_KEY","APP_VERSION_KEY","DEBUG_MODE_KEY","GTAG_CONFIG_COMMAND","GTAG_FUNCTION_NAME","DATA_LAYER_NAME","SEND_TO_KEY","AngularFireAnalytics","constructor","analyticsCollectionEnabled","providedAppVersion","providedAppName","debugModeEnabled","providedConfig","platformId","zone","schedulers","analyticsInitialized","Promise","window","parseMeasurementId","args","origin","measurementId","patchGtag","fn","console","info","_args","push","arguments","firebaseAnalyticsAlreadyInitialized","some","resolve","updateConfig","analytics","undefined","pipe","outsideAngular","supported","runOutsideAngular","name","bufferSize","refCount","config","Object","assign","update","ɵfac","FirebaseApp","NgZone","ɵAngularFireSchedulers","ɵprov","type","providedIn","decorators","UserTrackingService","auth","disposables","registerVersion","full","resolveInitialized","initialized","authState","subscribe","user","uid","credential","method","isAnonymous","additionalUserInfo","providerId","isNewUser","ngOnDestroy","forEach","it","unsubscribe","AngularFireAuth","SCREEN_VIEW_EVENT","ScreenTrackingService","router","title","componentFactoryResolver","userTrackingService","disposable","params","Router","Title","ComponentFactoryResolver","AngularFireAnalyticsModule","screenTracking","userTracking","then","ɵmod","ɵinj","providers"],"mappings":"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","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { of, EMPTY } from 'rxjs';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { observeOn, switchMap, map, shareReplay } from 'rxjs/operators';\nimport * as i2 from '@angular/fire';\nimport { VERSION } from '@angular/fire';\nimport * as i1 from '@angular/fire/compat';\nimport { ɵcacheInstance, ɵlazySDKProxy, ɵapplyMixins } from '@angular/fire/compat';\nimport { isSupported } from 'firebase/analytics';\nimport * as i2$2 from '@angular/router';\nimport * as i3 from '@angular/platform-browser';\nimport * as i2$1 from '@angular/fire/compat/auth';\nimport firebase from 'firebase/compat/app';\nimport { ɵscreenViewEvent } from '@angular/fire/analytics';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/analytics, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n    app: null,\n    logEvent: null,\n    setCurrentScreen: null,\n    setUserId: null,\n    setUserProperties: null,\n    setAnalyticsCollectionEnabled: null,\n};\n\nconst COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');\nconst APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');\nconst APP_NAME = new InjectionToken('angularfire2.analytics.appName');\nconst DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');\nconst CONFIG = new InjectionToken('angularfire2.analytics.config');\nconst APP_NAME_KEY = 'app_name';\nconst APP_VERSION_KEY = 'app_version';\nconst DEBUG_MODE_KEY = 'debug_mode';\nconst GTAG_CONFIG_COMMAND = 'config';\nconst GTAG_FUNCTION_NAME = 'gtag'; // TODO rename these\nconst DATA_LAYER_NAME = 'dataLayer';\nconst SEND_TO_KEY = 'send_to';\nclass AngularFireAnalytics {\n    constructor(app, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig, \n    // tslint:disable-next-line:ban-types\n    platformId, zone, schedulers) {\n        this.analyticsInitialized = new Promise(() => { });\n        if (isPlatformBrowser(platformId)) {\n            window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];\n            // It turns out we can't rely on the measurementId in the Firebase config JSON\n            // this identifier is not stable. firebase/analytics does a call to get a fresh value\n            // falling back on the one in the config. Rather than do that ourselves we should listen\n            // on our gtag function for a analytics config command\n            // e.g, ['config', measurementId, { origin: 'firebase', firebase_id }]\n            const parseMeasurementId = (...args) => {\n                if (args[0] === 'config' && args[2].origin === 'firebase') {\n                    this.measurementId = args[1];\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            };\n            const patchGtag = (fn) => {\n                window[GTAG_FUNCTION_NAME] = (...args) => {\n                    if (fn) {\n                        fn(...args);\n                    }\n                    // Inject app_name and app_version into events\n                    // TODO(jamesdaniels): I'm doing this as documented but it's still not\n                    //   showing up in the console. Investigate. Guessing it's just part of the\n                    //   whole GA4 transition mess.\n                    if (args[0] === 'event' && args[2][SEND_TO_KEY] === this.measurementId) {\n                        if (providedAppName) {\n                            args[2][APP_NAME_KEY] = providedAppName;\n                        }\n                        if (providedAppVersion) {\n                            args[2][APP_VERSION_KEY] = providedAppVersion;\n                        }\n                    }\n                    if (debugModeEnabled && typeof console !== 'undefined') {\n                        // tslint:disable-next-line:no-console\n                        console.info(...args);\n                    }\n                    /**\n                     * According to the gtag documentation, this function that defines a custom data layer cannot be\n                     * an arrow function because 'arguments' is not an array. It is actually an object that behaves\n                     * like an array and contains more information then just indexes. Transforming this into arrow function\n                     * caused issue #2505 where analytics no longer sent any data.\n                     */\n                    // tslint:disable-next-line: only-arrow-functions\n                    (function (..._args) {\n                        window[DATA_LAYER_NAME].push(arguments);\n                    })(...args);\n                };\n            };\n            // Unclear if we still need to but I was running into config/events I passed\n            // to gtag before ['js' timestamp] weren't getting parsed, so let's make a promise\n            // that resolves when firebase/analytics has configured gtag.js that we wait on\n            // before sending anything\n            const firebaseAnalyticsAlreadyInitialized = window[DATA_LAYER_NAME].some(parseMeasurementId);\n            if (firebaseAnalyticsAlreadyInitialized) {\n                this.analyticsInitialized = Promise.resolve();\n                patchGtag();\n            }\n            else {\n                this.analyticsInitialized = new Promise(resolve => {\n                    patchGtag((...args) => {\n                        if (parseMeasurementId(...args)) {\n                            resolve();\n                        }\n                    });\n                });\n            }\n            if (providedConfig) {\n                this.updateConfig(providedConfig);\n            }\n            if (debugModeEnabled) {\n                this.updateConfig({ [DEBUG_MODE_KEY]: 1 });\n            }\n        }\n        else {\n            this.analyticsInitialized = Promise.resolve();\n        }\n        const analytics = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(isSupported), switchMap(supported => supported ? zone.runOutsideAngular(() => import('firebase/compat/analytics')) : EMPTY), map(() => {\n            return ɵcacheInstance(`analytics`, 'AngularFireAnalytics', app.name, () => {\n                const analytics = app.analytics();\n                if (analyticsCollectionEnabled === false) {\n                    analytics.setAnalyticsCollectionEnabled(false);\n                }\n                return analytics;\n            }, [app, analyticsCollectionEnabled, providedConfig, debugModeEnabled]);\n        }), shareReplay({ bufferSize: 1, refCount: false }));\n        return ɵlazySDKProxy(this, analytics, zone);\n    }\n    updateConfig(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.analyticsInitialized;\n            window[GTAG_FUNCTION_NAME](GTAG_CONFIG_COMMAND, this.measurementId, Object.assign(Object.assign({}, config), { update: true }));\n        });\n    }\n}\nAngularFireAnalytics.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalytics, deps: [{ token: i1.FirebaseApp }, { token: COLLECTION_ENABLED, optional: true }, { token: APP_VERSION, optional: true }, { token: APP_NAME, optional: true }, { token: DEBUG_MODE, optional: true }, { token: CONFIG, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i2.ɵAngularFireSchedulers }], target: i0.ɵɵFactoryTarget.Injectable });\nAngularFireAnalytics.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalytics, providedIn: 'any' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalytics, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'any'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.FirebaseApp }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [COLLECTION_ENABLED]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [APP_VERSION]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [APP_NAME]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEBUG_MODE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CONFIG]\n                }] }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.NgZone }, { type: i2.ɵAngularFireSchedulers }]; } });\nɵapplyMixins(AngularFireAnalytics, [proxyPolyfillCompat]);\n\nclass UserTrackingService {\n    // TODO a user properties injector\n    constructor(analytics, \n    // tslint:disable-next-line:ban-types\n    platformId, auth, zone) {\n        this.disposables = [];\n        firebase.registerVersion('angularfire', VERSION.full, 'compat-user-tracking');\n        if (!isPlatformServer(platformId)) {\n            let resolveInitialized;\n            this.initialized = zone.runOutsideAngular(() => new Promise(resolve => resolveInitialized = resolve));\n            this.disposables = [\n                auth.authState.subscribe(user => {\n                    analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);\n                    resolveInitialized();\n                }),\n                auth.credential.subscribe(credential => {\n                    if (credential) {\n                        const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;\n                        if (credential.additionalUserInfo.isNewUser) {\n                            analytics.logEvent('sign_up', { method });\n                        }\n                        analytics.logEvent('login', { method });\n                    }\n                })\n            ];\n        }\n        else {\n            this.initialized = Promise.resolve();\n        }\n    }\n    ngOnDestroy() {\n        this.disposables.forEach(it => it.unsubscribe());\n    }\n}\nUserTrackingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UserTrackingService, deps: [{ token: AngularFireAnalytics }, { token: PLATFORM_ID }, { token: i2$1.AngularFireAuth }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nUserTrackingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UserTrackingService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: UserTrackingService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: AngularFireAnalytics }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i2$1.AngularFireAuth }, { type: i0.NgZone }]; } });\n\nconst SCREEN_VIEW_EVENT = 'screen_view';\nclass ScreenTrackingService {\n    constructor(analytics, router, title, componentFactoryResolver, zone, userTrackingService) {\n        firebase.registerVersion('angularfire', VERSION.full, 'compat-screen-tracking');\n        if (!router || !analytics) {\n            return this;\n        }\n        zone.runOutsideAngular(() => {\n            this.disposable = ɵscreenViewEvent(router, title, componentFactoryResolver).pipe(switchMap((params) => __awaiter(this, void 0, void 0, function* () {\n                if (userTrackingService) {\n                    yield userTrackingService.initialized;\n                }\n                return yield analytics.logEvent(SCREEN_VIEW_EVENT, params);\n            }))).subscribe();\n        });\n    }\n    ngOnDestroy() {\n        if (this.disposable) {\n            this.disposable.unsubscribe();\n        }\n    }\n}\nScreenTrackingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ScreenTrackingService, deps: [{ token: AngularFireAnalytics }, { token: i2$2.Router, optional: true }, { token: i3.Title, optional: true }, { token: i0.ComponentFactoryResolver }, { token: i0.NgZone }, { token: UserTrackingService, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nScreenTrackingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ScreenTrackingService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ScreenTrackingService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: AngularFireAnalytics }, { type: i2$2.Router, decorators: [{\n                    type: Optional\n                }] }, { type: i3.Title, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.NgZone }, { type: UserTrackingService, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nclass AngularFireAnalyticsModule {\n    constructor(analytics, screenTracking, userTracking) {\n        firebase.registerVersion('angularfire', VERSION.full, 'analytics-compat');\n        // calling anything on analytics will eagerly load the SDK\n        // tslint:disable-next-line:no-unused-expression\n        analytics.app.then(() => { });\n    }\n}\nAngularFireAnalyticsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalyticsModule, deps: [{ token: AngularFireAnalytics }, { token: ScreenTrackingService, optional: true }, { token: UserTrackingService, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nAngularFireAnalyticsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalyticsModule });\nAngularFireAnalyticsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalyticsModule, providers: [AngularFireAnalytics] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireAnalyticsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [AngularFireAnalytics]\n                }]\n        }], ctorParameters: function () { return [{ type: AngularFireAnalytics }, { type: ScreenTrackingService, decorators: [{\n                    type: Optional\n                }] }, { type: UserTrackingService, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APP_NAME, APP_VERSION, AngularFireAnalytics, AngularFireAnalyticsModule, COLLECTION_ENABLED, CONFIG, DEBUG_MODE, ScreenTrackingService, UserTrackingService };\n"]},"metadata":{},"sourceType":"module"}